You are inside my local VS Code workspace (read/write). Files are large.
Never return whole files or 1000-line regions. Work in micro-patches only.

MODE: PLAN (no code edits to .lua files)
• Only write two files: Analysis.txt and ChangePlan.txt.
• Do NOT modify AI Code.lua, sim.lua, or any .lua code files automatically.
• After writing those two files, emit ONE function drop-in (patch block) in chat only, for me to paste manually.

Source of truth
- rules script tabletop.txt — rules
- AI Code.lua — AI token (regions: Initialise, Placement, Plan, Battle, Flag)
- sim.lua — simulator (regions: Part1, Part2, Part3)
- How to talk to AI.txt — API contract (must remain unchanged)
- match summary.txt — latest results

Objective this run (Plan Mode):
1) Read match summary.txt and write a brief Analysis.txt (overwrite).
2) Create/overwrite ChangePlan.txt with an ordered list mapping fixes to exact functions (preferred) or sub-regions (if a function isn’t clearly isolated).
3) Do NOT change any .lua code on disk.
4) In chat, output ONE function patch block for item [1] in the plan (exact drop-in replacement). I will paste it manually.
5) On request (“next”, “give [2]”, “give decide_if_buff”, etc.), output the next single function patch block in chat (still no file edits).

Difficulty ladder constraints
- D1 = cautious beginner (no silly mistakes)
- D5 = as strong as possible
- Linear D1→D5

Preserve the public AI API from How to talk to AI.txt

Hard limits (to avoid “Error generating diff”)
- Do not output entire files or entire 1000-line regions.
- Prefer replace-function patches (single function body).
- If a change truly spans multiple functions, split into multiple runs (one function per run).

Deliverables (each run)
A) Analysis.txt (very brief)
   - 5–10 lines max.
   - Key stats (wins/attempts, K/D, HitRate, shield life, progress, threat deltas).
   - Identify primary bias and likely root causes (1–3 bullets).

B) ChangePlan.txt (ordered list; overwrite every run)
   Use this exact format per item:
   [<n>] <file> :: <exact function name or region anchor>
       Why: <1–2 lines: what’s wrong>
       Change: <imperative summary of the fix in 1–3 bullets>
       Patch Type: replace-function | insert-guard | region-tweak
       Test: <acceptance criteria; quick checks>
       Risk: Low/Med/High
       Status: TODO

   Example:
   [1] sim.lua :: roll_initiative_or_set_starter
       Why: Fixed-first-player creates P2 advantage in current seed pattern.
       Change:
         - Alternate starter by round OR shuffle fair seed per match.
         - Ensure deterministic, symmetric seeding across colors.
       Patch Type: replace-function
       Test: P1/P2 win rate gap ≤ 3% over 500 games with same RNG seed.
       Risk: Low
       Status: TODO

C) One function drop-in (chat only)
   - After writing the two files, output ONE function patch block (for item [1]).
   - Do not write any .lua code to disk.
   - I will paste the function manually into the file.

Patch Output Contract (when asked to output a function)
- Respond with ONE patch block and NOTHING else (no intro, no analysis).
- Format EXACTLY:

PATCH
file: <relative-path>
mode: replace-function
function: <exact function name>
code:
```lua
-- full function including signature and 'end'
local function <exact function name>(...)
  -- body
end
